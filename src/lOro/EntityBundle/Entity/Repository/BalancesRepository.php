<?php

namespace lOro\EntityBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BalancesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BalancesRepository extends EntityRepository
{
    
    
    /* Funcion para buscar Vistas */
    public function findAllByView($vista) {
      $conn = $this->getEntityManager()->getConnection();

      $query = "SELECT * FROM $vista;";
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();           
    }
    
    public function findTransferenciasConfirmadasPorTipoMonedaHC() {
      $conn = $this->getEntityManager()->getConnection();

      $query = "SELECT t.tipo_moneda_conversion_id,
                SUM(t.monto_a_convertir) AS total_transferido_descontado
                FROM transferencias AS t 
                WHERE estatus = 'C'
                GROUP BY t.tipo_moneda_conversion_id;";
      
      $stmt = $conn->executeQuery($query);
            
      return $stmt->fetchAll();        
    }
    
    
    public function findCreditoGeneradoPorTipoMonedaHC(){
      $conn = $this->getEntityManager()->getConnection();

      $query = "SELECT e.tipo_moneda_id,
                       SUM((((vc.valor_onza / 31.1035) * 0.97) *  chcp.material_entregado)) AS total_credito_entregas
                FROM cierres_hc_piezas AS chcp
                JOIN ventas_cierres AS vc ON (chcp.cierre_hc_id = vc.id)
                JOIN piezas AS pz ON (pz.id = chcp.pieza_id)
                JOIN entregas AS e ON (e.id = pz.entrega_id)
                GROUP BY e.tipo_moneda_id;";
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();
    }
    
    /* CONCILIACION DE CAJA */
    public function findVConciliacionCajaPagosVarios() {
      $conn = $this->getEntityManager()->getConnection();

      $query = 'SELECT * FROM v_conciliacion_caja_bolivares AS vccb ORDER BY vccb.fecha ASC;';
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }    
    
    public function guardarTransaccionesConciliadas($tabla,$idTransaccion) {
      $conn = $this->getEntityManager()->getConnection();

      $query = "UPDATE $tabla SET conciliado_en_caja = 1 WHERE id = $idTransaccion";
      
      $stmt = $conn->executeQuery($query);
            
            
      return 'exito';           
    }
    /* CONCILIACION DE CAJA */
    
    public function calcularDolaresTransferidosAupanasAnual() {
      $conn = $this->getEntityManager()->getConnection();
           
      $config = $this->getEntityManager()->getConfiguration();
      $config->addCustomNumericFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
      
      $stmt = $conn->executeQuery("SELECT SUM(t.monto_transferencia) AS dolares_transferidos_hc 
                                   FROM transferencias AS t
                                   WHERE estatus = 'C'
                                   AND YEAR(fe_transferencia) = YEAR(CURRENT_TIMESTAMP());");
            
           
      return $stmt->fetch();
    }
    
    public function getBalanceCreditoHc() {
      $conn = $this->getEntityManager()->getConnection();
           
      $stmt = $conn->executeQuery("SELECT * FROM v_balance_credito_hc;");
            
           
      return $stmt->fetch();
    }    
    
    
    public function findAllDatosBalanceCierres($balanceActivo,$tipoCierre) {
             $conn = $this->getEntityManager()->getConnection();
              
           $stmt = $conn->executeQuery(
                'SELECT bc.total_oro_cierres,
                                bc.total_dolares_cierres,
                                bc.total_bs_formula,
                                bc.total_bs_cierre
                FROM balance_general_cierres AS bc
                WHERE bc.balance_id = :balanceActivo
                AND bc.tipo_cierre = :tipoCierre',
                array('balanceActivo' => $balanceActivo->getId(),
                          'tipoCierre' => $tipoCierre)    
                 );
            
            
            return $stmt->fetch();
    }
    
    public function findGramosCierresEntregasMes() {
      $conn = $this->getEntityManager()->getConnection();


      
      $config = $this->getEntityManager()->getConfiguration();
      $config->addCustomNumericFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
      $config->addCustomNumericFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        
      $queryAnualizado = 'SELECT SUM(gramos_cerrados_proveedor) AS anual_gramos_c_proveedor,
                                 SUM(gramos_cerrados_hc) AS anual_gramos_c_hc,
                                 SUM(gramos_entregados) AS anual_gramos_entregados
                          FROM balance_gramos_cierres_entregas_mes
                          WHERE  anio_venta = YEAR(CURRENT_TIMESTAMP());';
      
      $queryMensual = 'SELECT
(SELECT SUM(gramos_cerrados_proveedor) 
FROM balance_gramos_cierres_entregas_mes
WHERE  anio_venta = YEAR(CURRENT_TIMESTAMP())
AND  mes_venta <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_gramos_c_proveedor,
(SELECT SUM(gramos_cerrados_hc)
FROM balance_gramos_cierres_entregas_mes
WHERE  anio_venta = YEAR(CURRENT_TIMESTAMP())
AND  mes_venta <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_gramos_cerrados_hc,
(SELECT SUM(gramos_entregados) 
FROM balance_gramos_cierres_entregas_mes
WHERE  anio_venta = YEAR(CURRENT_TIMESTAMP())
AND  mes_venta <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_gramos_entregados,
gramos_cerrados_proveedor AS anual_gramos_c_proveedor,
gramos_cerrados_hc AS anual_gramos_c_hc,
gramos_entregados AS anual_gramos_entregados
FROM balance_gramos_cierres_entregas_mes
WHERE  mes_venta = MONTH(CURRENT_TIMESTAMP())
AND anio_venta = YEAR(CURRENT_TIMESTAMP());';
      
      $stmt = $conn->executeQuery($queryMensual);
            
            
      return $stmt->fetch();
    }   
    
    
    public function findGramosCierresEntregasAnuales() {
      $conn = $this->getEntityManager()->getConnection();

      $conn->executeQuery("SET SESSION sql_mode = ''");
      
      $queryAnualizado = 'SELECT *
                          FROM balance_gramos_cierres_entregas_mes;';
      
      $stmt = $conn->executeQuery($queryAnualizado);
            
            
      return $stmt->fetchAll();
    }    
    
    public function findBalancePagosProveedoresMesAnio() {
      $conn = $this->getEntityManager()->getConnection();

      $query = 'SELECT * FROM balance_pagos_proveedores_mes_anio;';
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();
    }    
    
    public function findBalancePagosVariosMesAnio() {
      $conn = $this->getEntityManager()->getConnection();

      $query = 'SELECT * FROM balance_pagos_varios_mes_anio;';
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }
    
    public function findBalanceVentasDolaresMesAnio() {
      $conn = $this->getEntityManager()->getConnection();

      $query = 'SELECT * FROM balance_ventas_dolares_mes_anio;';
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }    
    
    public function findBalanceAbonosMesAnio() {
      $conn = $this->getEntityManager()->getConnection();

      $query = 'SELECT * FROM balance_abonos_mes_anio;';
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }
    
    public function findBalanceDebitosMesAnio() {
      $conn = $this->getEntityManager()->getConnection();

      $query = 'SELECT * FROM balance_debitos_mes_anio;';
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }    
    
    public function findBalanceTransferenciasConfirmadasMesAnio() {
      $conn = $this->getEntityManager()->getConnection();

      $query = 'SELECT * FROM balance_transferencias_confirmadas_mes_anio;';
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }     
    
    public function findBalanceDolaresGeneradosRelacionEntregasCierresHcMesAnio() {
      $conn = $this->getEntityManager()->getConnection();

      $query = 'SELECT * FROM balance_dolares_generados_relacion_entregas_cierres_hc_mes_anio;';
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }     
    
    
    
    
    
    
    public function findDolaresBolivaresMes() {
      $conn = $this->getEntityManager()->getConnection();
      
      $config = $this->getEntityManager()->getConfiguration();
      $config->addCustomNumericFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
      $config->addCustomNumericFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        
      $queryMensual = 'SELECT (SELECT SUM(bolivares_pagados) 
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE  anio = YEAR(CURRENT_TIMESTAMP())
                               AND mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_bolivares_pagados, 
                              (SELECT SUM(bolivares_recibidos)
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE  anio = YEAR(CURRENT_TIMESTAMP())
                               AND mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH))  AS acumulado_bolivares_recibidos,
                              (SELECT SUM(dolares_vendidos) 
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE  anio = YEAR(CURRENT_TIMESTAMP())
                               AND mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_dolares_vendidos,
                              (SELECT SUM(pagos_varios_en_dolares) 
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE  anio = YEAR(CURRENT_TIMESTAMP())
                               AND mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_pagos_varios_en_dolares,
                              (SELECT SUM(abonos_en_bolivares) 
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE  anio = YEAR(CURRENT_TIMESTAMP())
                               AND mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_abonos_en_bolivares,
                              (SELECT SUM(abonos_en_dolares) 
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE  anio = YEAR(CURRENT_TIMESTAMP())
                               AND mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_abonos_en_dolares,
                              (SELECT SUM(pagos_proveedores_en_dolares) 
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE  anio = YEAR(CURRENT_TIMESTAMP())
                               AND mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_pagos_proveedores_en_dolares, 
                              (SELECT SUM(dolares_transferidos)
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE  anio = YEAR(CURRENT_TIMESTAMP())
                               AND mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_dolares_transferidos,
                              (SELECT SUM(dolares_generados_entregas_hc)
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE  anio = YEAR(CURRENT_TIMESTAMP())
                               AND mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_dolares_generados_entregas_hc,
       v_inicial.bolivares_pagados AS anual_bolivares_pagados,
       v_inicial.bolivares_recibidos AS anual_bolivares_recibidos,
       v_inicial.dolares_vendidos AS anual_dolares_vendidos,
       v_inicial.pagos_varios_en_dolares AS anual_pagos_varios_en_dolares,
       v_inicial.abonos_en_bolivares AS anual_abonos_en_bolivares,
       v_inicial.abonos_en_dolares AS anual_abonos_en_dolares,
       v_inicial.pagos_proveedores_en_dolares AS anual_pagos_proveedores_en_dolares,
       v_inicial.dolares_transferidos AS anual_dolares_transferidos,
       v_inicial.dolares_generados_entregas_hc AS anual_dolares_generados_entregas_hc
FROM balance_gramos_dolares_bolivares_mes AS v_inicial
WHERE  mes = MONTH(CURRENT_TIMESTAMP());';
      
      $stmt = $conn->executeQuery($queryMensual);
            
            
      return $stmt->fetch();
    } 
    
    public function findDolaresBolivaresAcumulados() {
      $conn = $this->getEntityManager()->getConnection();
      
      $config = $this->getEntityManager()->getConfiguration();
      $config->addCustomNumericFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
      $config->addCustomNumericFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');

      $queryAnualizado = 'SELECT (SELECT SUM(bolivares_pagados) 
                                  FROM balance_gramos_dolares_bolivares_mes
                                  WHERE mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_bolivares_pagados, 
                              (SELECT SUM(bolivares_recibidos)
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH))  AS acumulado_bolivares_recibidos,
                              (SELECT SUM(dolares_vendidos) 
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_dolares_vendidos,
                              (SELECT SUM(pagos_varios_en_dolares) 
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_pagos_varios_en_dolares,
                              (SELECT SUM(abonos_en_bolivares) 
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_abonos_en_bolivares,
                              (SELECT SUM(abonos_en_dolares) 
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_abonos_en_dolares,
                              (SELECT SUM(pagos_proveedores_en_dolares) 
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_pagos_proveedores_en_dolares, 
                              (SELECT SUM(dolares_transferidos)
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_dolares_transferidos,
                              (SELECT SUM(dolares_generados_entregas_hc)
                               FROM balance_gramos_dolares_bolivares_mes
                               WHERE mes <= MONTH(CURRENT_TIMESTAMP() - INTERVAL 1 MONTH)) AS acumulado_dolares_generados_entregas_hc
FROM balance_gramos_dolares_bolivares_mes AS v_inicial;';
      
      
      $stmt = $conn->executeQuery($queryAnualizado);
            
            
      return $stmt->fetch();
    }     
    
    public function balanceBolivaresDolaresMensual() {
      $conn = $this->getEntityManager()->getConnection();
      
      $config = $this->getEntityManager()->getConfiguration();
      $config->addCustomNumericFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
      $config->addCustomNumericFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        
      
      $queryMensual = 'SELECT * 
                       FROM balance_gramos_dolares_bolivares_mes
                       WHERE  mes = MONTH(CURRENT_TIMESTAMP());';
      
      $stmt = $conn->executeQuery($queryMensual);
            
            
      return $stmt->fetch();
    }   
    
    public function gramosQueDeboEnDolares() {
      $conn = $this->getEntityManager()->getConnection();
      
      
      $query = "SELECT SUM((gramos_cerrados_restantes * (valor_onza/31.1035))) AS gramos_en_dolares_que_debo
                FROM ventas_cierres 
                WHERE tipo_cierre = 'hc'
                AND gramos_cerrados_restantes != 0;";
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetch();
    }       




    
       public function balancePorProveedorGeneral($proveedorId) {
        $em = $this->getEntityManager();
        $conn = $em->getConnection();

        $query = "CALL GET_BALANCE_POR_PROVEEDOR($proveedorId,@_BALANCE_MAT_PROV,@_BALANCE_BS_PROV,@_BALANCE_DOL_PROV,@_BALANCE_EU_PROV);";
        $stmt = $conn->executeQuery($query);


      $query = "SELECT @_BALANCE_MAT_PROV AS balance_mat,@_BALANCE_BS_PROV AS balance_bs,@_BALANCE_DOL_PROV AS balance_dol,@_BALANCE_EU_PROV AS balance_eu;";
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetch();
   }   



    /**
     * Query que permite realizar la relación de los Dolares y Bolivares por
     * los diferentes conceptos que se manejan en el sistema para generar el balance
     * general acumulado y mensual (Restas y Sumas en Dolares y Bolivares)
     * 
     * @author Gabriel E. Peñaranda G. <gabriel.e.p.gonzalez@gmail.com>
     * @status Active
     * 
     * @return object $data - Datos del Resultado de la Consulta
     */
    public function balanceBolivaresGeneral() {
      $em = $this->getEntityManager();
      $conn = $em->getConnection();

     
      

      $query = "CALL GET_BALANCE_BOLIVARES_GENERAL(@_BALANCE_ACUMULADO_BOLIVARES,@_DEUDA_CON_PROVEEDORES,@_DEUDA_CON_MINORISTAS,@_TOTAL_CAJA);";
      $stmt = $conn->executeQuery($query);


      $query = "SELECT @_BALANCE_ACUMULADO_BOLIVARES AS balance_acumulado_bolivares, @_DEUDA_CON_PROVEEDORES AS deuda_proveedores,@_DEUDA_CON_MINORISTAS AS deuda_minoristas,@_TOTAL_CAJA AS total_caja;";
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetch();
    }   


    /**
     * Query que permite realizar la relación del material tanto para HC
     * como para los Proveedores y  las entregas.
     * 
     * @author Gabriel E. Peñaranda G. <gabriel.e.p.gonzalez@gmail.com>
     * @status Active
     * 
     * @return object $data - Datos del Resultado de la Consulta
     */
    public function buscarBalanceGramosCerradosEntregados() {
      $em = $this->getEntityManager();
      $conn = $em->getConnection();

     
      $query = "call GET_BALANCE_GRAMOS_CIERRES_ENTREGAS_POR_MES_ANIO(@_GRAMOS_ENTREGADOS_PROV_MES,@_GRAMOS_ENTREGADOS_HC_MES,@_GRAMOS_CERRADOS_PROVEEDORES_MES,@_GRAMOS_CERRADOS_HC_MES,@_BALANCE_ACUMULADO_PROVEEDORES,@_BALANCE_ACUMULADO_HC);";
      $stmt = $conn->executeQuery($query);


      $query = "SELECT @_GRAMOS_ENTREGADOS_PROV_MES AS gramos_entregados_prov_mes,@_GRAMOS_ENTREGADOS_HC_MES   AS gramos_entregados_hc_mes,@_GRAMOS_CERRADOS_PROVEEDORES_MES AS gramos_cerrados_proveedores_mes,@_GRAMOS_CERRADOS_HC_MES AS gramos_cerrados_hc_mes,@_BALANCE_ACUMULADO_PROVEEDORES AS balance_acumulado_proveedores,@_BALANCE_ACUMULADO_HC AS balance_acumulado_hc;";
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetch();
    }


    /**
     * Query que permite realizar la relación del material tanto para HC
     * como para los Proveedores y  las entregas.
     * 
     * @author Gabriel E. Peñaranda G. <gabriel.e.p.gonzalez@gmail.com>
     * @status Active
     * 
     * @return object $data - Datos del Resultado de la Consulta
     */
    public function buscarBalancePorProveedorTipoDivisa() {
      $em = $this->getEntityManager();
      $conn = $em->getConnection();
      
      $arregloTransferenciasPendientes = array();
      
      foreach($em->getRepository('lOroEntityBundle:Proveedores')->findBy(array('compraDolares' => 1)) AS $proveedor):
        foreach($em->getRepository('lOroEntityBundle:TiposMoneda')->findAll() AS $tipoMoneda):

          $beneficiarioId = $proveedor->getId();
          $tipoMonedaId = $tipoMoneda->getId();

          $query = "call GET_BALANCE_DIVISAS_POR_CLIENTE($beneficiarioId, $tipoMonedaId);";
          $execQ = $conn->executeQuery($query);
          $balanceDvisasProveedor = $execQ->fetch();
          $execQ->closeCursor();
          
          if($balanceDvisasProveedor['TOTAL_BALANCE_PROVEEDOR']):
            $datosTransferenciasPendientes['nbProveedor'] = $proveedor->getNbProveedor();
            $datosTransferenciasPendientes['simboloMoneda'] = $tipoMoneda->getSimboloMoneda();
            $datosTransferenciasPendientes['totalBalanceProveedor'] = $balanceDvisasProveedor['TOTAL_BALANCE_PROVEEDOR'];

            $arregloTransferenciasPendientes[] = $datosTransferenciasPendientes;
          endif;
        endforeach;
      endforeach;

      return $arregloTransferenciasPendientes;
    }   



    /**
     * Query que permite realizar la relación del material tanto para HC
     * como para los Proveedores y  las entregas.
     * 
     * @author Gabriel E. Peñaranda G. <gabriel.e.p.gonzalez@gmail.com>
     * @status Active
     * 
     * @return object $data - Datos del Resultado de la Consulta
     */
    public function buscarBalanceCreditoHcPorDivisa($tipoMonedaId) {
      $em = $this->getEntityManager();
      $conn = $em->getConnection();
      
     
      
      $query = "call GET_CALCULO_CREDITO_HC($tipoMonedaId);";
      
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetch();
    }


    /**
     * 
     * @author Gabriel E. Peñaranda G. <gabriel.e.p.gonzalez@gmail.com>
     * @status Active
     * 
     * @return object $data - Datos del Resultado de la Consulta
     */
   public function balanceProveedoresGeneral() {
      $em = $this->getEntityManager();
      $conn = $em->getConnection();

     
      

      $query = "CALL GET_BALANCE_LISTADO_PROVEEDORES_GENERAL(@_LISTADO_PROVEEDORES);";
      $stmt = $conn->executeQuery($query);


      $query = "SELECT @_LISTADO_PROVEEDORES AS listado_proveedores;";
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetch();
   }  



    


public function balanceMinoristasGeneral() {
      $em = $this->getEntityManager();
      $conn = $em->getConnection();

     
      

      $query = "CALL GET_BALANCE_LISTADO_MINORISTAS(@_LISTADO_MINORISTAS);";
      $stmt = $conn->executeQuery($query);


      $query = "SELECT @_LISTADO_MINORISTAS AS listado_minoristas;";
      $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetch();
   }           

}
